<%- include('../include/header') %>
<%- include('../include/sidebar') %>

<!-- ===== Page Header / Filters (Sticky) ===== -->
<div class="sticky top-0 z-30 bg-[#0b1220]/80 backdrop-blur border-b border-white/10">
  <div class="px-4 md:px-6 py-4 flex flex-col md:flex-row md:items-center md:justify-between gap-3">
    <div class="flex items-center gap-3">
      <h1 class="text-xl md:text-2xl font-semibold">Trade History</h1>
      <span class="text-xs px-2 py-0.5 rounded-full bg-white/10 border border-white/10 text-white/70">
        <%= totalCount %> trades
      </span>
    </div>
    <form method="GET" class="flex flex-wrap gap-2 items-center">
      <!-- Market -->
      <select name="market" onchange="this.form.submit()"
        class="bg-[#0f172a] text-white border border-white/10 text-sm px-3 py-2 rounded-lg hover:border-indigo-500/50 focus:outline-none focus:ring-2 focus:ring-indigo-600 min-w-[9rem]">
        <% marketList.forEach(m => { %>
          <option value="<%= m.id %>" <%= market == m.id ? 'selected' : '' %>><%= m.market_name %></option>
        <% }) %>
      </select>

      <!-- Month -->
      <select name="month" onchange="this.form.submit()"
        class="bg-[#0f172a] text-white border border-white/10 text-sm px-3 py-2 rounded-lg hover:border-indigo-500/50 focus:outline-none focus:ring-2 focus:ring-indigo-600 min-w-[9rem]">
        <% for (let m = 0; m < 12; m++) { %>
          <option value="<%= m %>" <%= m == month ? 'selected' : '' %>>
            <%= new Date(2000, m).toLocaleString('default', { month: 'long' }) %>
          </option>
        <% } %>
      </select>

      <!-- Year -->
      <select name="year" onchange="this.form.submit()"
        class="bg-[#0f172a] text-white border border-white/10 text-sm px-3 py-2 rounded-lg hover:border-indigo-500/50 focus:outline-none focus:ring-2 focus:ring-indigo-600 min-w-[7rem]">
        <% for (let y = 2024; y <= 2030; y++) { %>
          <option value="<%= y %>" <%= y == year ? 'selected' : '' %>><%= y %></option>
        <% } %>
      </select>
    </form>
  </div>
</div>

<!-- ===== Toolbar ===== -->
<div class="px-4 md:px-6 mt-4">
  <div class="bg-[#0b1220] border border-white/10 rounded-2xl p-4 md:p-5">
    <div class="flex flex-col md:flex-row md:items-center md:justify-between gap-3">
      <div class="flex flex-wrap gap-2">
        <button class="inline-flex items-center gap-2 bg-white/5 hover:bg-white/10 border border-white/10 px-3 py-2 rounded-lg text-sm">
          <i class="fas fa-sync-alt"></i> Sync Broker
        </button>
        <a href="/trades/add" class="inline-flex items-center gap-2 bg-indigo-600 hover:bg-indigo-700 px-3 py-2 rounded-lg text-sm font-medium">
          <i class="fas fa-plus"></i> New Trade
        </a>
        <button id="generateInsightBtn" onclick="generateInsight()" class="inline-flex items-center gap-2 bg-purple-600 hover:bg-purple-700 px-3 py-2 rounded-lg text-sm">
          🔍 Generate AI Insight
        </button>
      </div>
      <div id="showingStats" class="text-sm text-white/70">
        Showing <%= showingStart %>–<%= showingEnd %> of <%= totalCount %> trades
      </div>
    </div>

    <!-- Filter chips / inputs -->
    <div class="mt-4 grid grid-cols-1 md:grid-cols-3 lg:grid-cols-6 gap-2">
      <input id="fltSymbol" type="text" placeholder="🔎 Symbol"
        class="bg-[#0f172a] text-white border border-white/10 text-sm px-3 py-2 rounded-lg placeholder-white/40">
      <select id="fltDirection" class="bg-[#0f172a] text-white border border-white/10 text-sm px-3 py-2 rounded-lg">
        <option value="">Direction: All</option>
        <option value="Long">Long</option>
        <option value="Short">Short</option>
      </select>
      <select id="fltStrategy" class="bg-[#0f172a] text-white border border-white/10 text-sm px-3 py-2 rounded-lg">
        <option value="">Strategy: All</option>
      </select>
      <select id="fltOutcome" class="bg-[#0f172a] text-white border border-white/10 text-sm px-3 py-2 rounded-lg">
        <option value="">Outcome: All</option>
      </select>
      <input id="fltDateRange" type="text" placeholder="📅 Date range"
        class="bg-[#0f172a] text-white border border-white/10 text-sm px-3 py-2 rounded-lg placeholder-white/40" />
      <div class="hidden">
        <input id="fltDateFrom" type="hidden">
        <input id="fltDateTo" type="hidden">
      </div>
    </div>

    <div class="mt-3 grid grid-cols-1 md:grid-cols-4 lg:grid-cols-6 gap-2">
      <input id="fltPLMin" type="number" step="0.01" placeholder="P/L min"
        class="bg-[#0f172a] text-white border border-white/10 text-sm px-3 py-2 rounded-lg placeholder-white/40">
      <input id="fltPLMax" type="number" step="0.01" placeholder="P/L max"
        class="bg-[#0f172a] text-white border border-white/10 text-sm px-3 py-2 rounded-lg placeholder-white/40">
      <input id="fltPctMin" type="number" step="0.01" placeholder="% min"
        class="bg-[#0f172a] text-white border border-white/10 text-sm px-3 py-2 rounded-lg placeholder-white/40">
      <input id="fltPctMax" type="number" step="0.01" placeholder="% max"
        class="bg-[#0f172a] text-white border border-white/10 text-sm px-3 py-2 rounded-lg placeholder-white/40">
      <button id="fltApply" type="button"
        class="bg-emerald-600 hover:bg-emerald-700 text-white text-sm px-3 py-2 rounded-lg">Apply</button>
      <button id="fltReset" type="button"
        class="bg-white/10 hover:bg-white/15 border border-white/10 text-white text-sm px-3 py-2 rounded-lg">Reset</button>
    </div>
  </div>
</div>

<!-- ===== AI Report ===== -->
<div class="px-4 md:px-6">
  <div id="aiReportContainer" class="mt-6 hidden bg-[#0b1220] border border-white/10 rounded-2xl p-5">
    <div class="flex flex-col md:flex-row md:items-center md:justify-between gap-3 text-sm text-white/70 mb-3">
      <span id="generatedAt">📅 Generated just now</span>
      <button onclick="downloadAIReport()" class="inline-flex items-center gap-2 bg-indigo-600 hover:bg-indigo-700 text-white px-3 py-2 rounded-lg">
        📄 Download PDF
      </button>
    </div>
    <div id="aiReportContent" class="prose prose-invert prose-sm max-w-none whitespace-pre-wrap text-white"></div>
  </div>
</div>

<!-- ===== Table ===== -->
<div class="px-4 md:px-6 mt-6">
  <div class="bg-[#0b1220] border border-white/10 rounded-2xl overflow-hidden">
    <div class="overflow-x-auto">
      <table id="tradeTable" class="w-full text-sm text-left text-white min-w-[900px]">
        <thead class="text-xs text-white/70 uppercase border-b border-white/10 sticky top-0 bg-[#0b1220] z-10">
          <tr>
            <th class="px-4 py-3 cursor-pointer select-none" data-sort="date">Date <span class="opacity-60" data-sort-indicator>⇅</span></th>
            <th class="px-4 py-3 cursor-pointer select-none" data-sort="symbol">Symbol <span class="opacity-60" data-sort-indicator>⇅</span></th>
            <th class="px-4 py-3 cursor-pointer select-none" data-sort="direction">Direction <span class="opacity-60" data-sort-indicator>⇅</span></th>
            <th class="px-4 py-3">Entry / Exit</th>
            <th class="px-4 py-3 cursor-pointer select-none" data-sort="pl">P/L ( / %) <span class="opacity-60" data-sort-indicator>⇅</span></th>
            <th class="px-4 py-3 cursor-pointer select-none" data-sort="rr">Risk/Reward <span class="opacity-60" data-sort-indicator>⇅</span></th>
            <th class="px-4 py-3 cursor-pointer select-none" data-sort="strategy">Strategy <span class="opacity-60" data-sort-indicator>⇅</span></th>
            <th class="px-4 py-3 cursor-pointer select-none" data-sort="outcome">Outcome <span class="opacity-60" data-sort-indicator>⇅</span></th>
            <th class="px-4 py-3">Actions</th>
          </tr>
        </thead>

        <tbody>
          <% if (trades.length === 0) { %>
            <tr>
              <td colspan="9" class="text-center py-10 text-white/60">No trades found for this period.</td>
            </tr>
          <% } %>

          <% trades.forEach(trade => { 
              const entry = parseFloat(trade.entry_price || 0);
              const exit = parseFloat(trade.exit_price || 0);
              const direction = trade.trade_type == 1 ? 'Long' : 'Short';
              const isProfit = (direction === 'Long') ? (exit > entry) : (entry > exit);
              const pl = (direction === 'Long') ? (exit - entry) : (entry - exit);
              const plPct = entry > 0 ? ((pl / entry) * 100) : 0;
              const rr = Number(parseFloat(trade.target) / parseFloat(trade.stop_loss || 1));
              const isoDate = moment(trade.datetime).format('YYYY-MM-DD');
              const strategyName = (trade?.Strategy?.name || '—');
              const outcomeLabel = (trade?.Outcome?.label || '—');
          %>
            <tr class="border-b border-white/5 odd:bg-white/[0.015] hover:bg-white/[0.04] transition"
                data-date="<%= isoDate %>"
                data-symbol="<%= (trade.symbol || '').toLowerCase() %>"
                data-direction="<%= direction %>"
                data-strategy="<%= strategyName %>"
                data-outcome="<%= outcomeLabel %>"
                data-pl="<%= pl %>"
                data-plpct="<%= plPct %>"
                data-rr="<%= isFinite(rr) ? rr : 0 %>">
              <td class="px-4 py-3" data-value="<%= isoDate %>">
                <div class="font-medium"><%= moment(trade.datetime).format('DD MMM, YYYY') %></div>
                <div class="text-xs text-white/60"><%= moment(trade.datetime).format('HH:mm') %></div>
              </td>
              <td class="px-4 py-3 uppercase tracking-wide" data-value="<%= (trade.symbol || '').toLowerCase() %>">
                <%= trade.symbol %>
              </td>
              <td class="px-4 py-3" data-value="<%= direction %>">
                <span class="inline-flex items-center gap-1 px-2 py-1 rounded text-xs 
                  <%= direction === 'Long' ? 'bg-emerald-600/20 text-emerald-300 border border-emerald-500/20' : 'bg-red-600/20 text-red-300 border border-red-500/20' %>">
                  <i class="fas <%= direction === 'Long' ? 'fa-arrow-up' : 'fa-arrow-down' %>"></i> <%= direction %>
                </span>
              </td>
              <td class="px-4 py-3">
                <div class="text-white/90"><%= trade.entry_price %></div>
                <div class="text-white/60 text-xs">→ <%= trade.exit_price %></div>
              </td>
              <td class="px-4 py-3 <%= isProfit ? 'text-emerald-400' : 'text-red-400' %>" data-value="<%= pl %>">
                <div class="font-semibold"><%= (pl >= 0 ? '+' : '') %><%= pl.toFixed(2) %></div>
                <div class="text-xs text-white/70"><%= (plPct >= 0 ? '+' : '') %><%= plPct.toFixed(2) %>%</div>
              </td>
              <td class="px-4 py-3" data-value="<%= isFinite(rr) ? rr : 0 %>">
                <span class="inline-flex items-center px-2 py-1 rounded text-xs bg-amber-500/20 text-amber-300 border border-amber-400/20">
                  1:<%= isFinite(rr) ? rr.toFixed(2) : '0.00' %>
                </span>
              </td>
              <td class="px-4 py-3" data-value="<%= strategyName %>">
                <span class="inline-flex items-center px-2 py-1 rounded text-xs bg-white/10 border border-white/10">
                  <%= strategyName %>
                </span>
              </td>
              <td class="px-4 py-3" data-value="<%= outcomeLabel %>">
                <% if (trade.Outcome) { %>
                  <span class="inline-flex items-center px-2 py-1 rounded text-xs bg-emerald-600/20 text-emerald-300 border border-emerald-500/20">
                    <%= outcomeLabel %>
                  </span>
                <% } else { %>
                  <span class="inline-flex items-center px-2 py-1 rounded text-xs bg-white/10 border border-white/10">—</span>
                <% } %>
              </td>
              <td class="px-4 py-3">
                <div class="flex gap-2">
                  <a href="/trades/edit/<%= trade.id %>" class="inline-flex items-center justify-center w-9 h-9 rounded-lg bg-indigo-600 hover:bg-indigo-700">
                    <i class="fas fa-edit text-sm"></i>
                  </a>
                  <button type="button" class="deleteTradeBtn inline-flex items-center justify-center w-9 h-9 rounded-lg bg-red-600 hover:bg-red-700" data-id="<%= trade.id %>">
                    <i class="fas fa-trash-alt text-sm"></i>
                  </button>
                </div>
              </td>
            </tr>
          <% }) %>
        </tbody>
      </table>
    </div>

    <!-- Pagination -->
    <div class="px-4 py-4 border-t border-white/10 flex flex-col sm:flex-row justify-between items-start sm:items-center gap-3 text-sm">
      <div class="text-white/70">
        <span id="showingStatsBottom">Showing <%= showingStart %>–<%= showingEnd %> of <%= totalCount %> trades</span>
      </div>
      <div class="flex gap-2">
        <%
          const qsParts = [];
          if (typeof market !== 'undefined' && market) qsParts.push(`market=${encodeURIComponent(market)}`);
          if (typeof month !== 'undefined' && month !== null && month !== '') qsParts.push(`month=${encodeURIComponent(month)}`);
          if (typeof year !== 'undefined' && year) qsParts.push(`year=${encodeURIComponent(year)}`);
          const extraQS = qsParts.length ? '&' + qsParts.join('&') : '';
        %>

        <% if (currentPage > 1) { %>
          <a href="?page=<%= currentPage - 1 %><%= extraQS %>" class="px-3 py-1.5 rounded-lg bg-white/10 hover:bg-white/15 border border-white/10">&lt;</a>
        <% } else { %>
          <span class="px-3 py-1.5 rounded-lg bg-white/5 border border-white/10 opacity-50 cursor-not-allowed">&lt;</span>
        <% } %>

        <% for (let i = 1; i <= totalPages; i++) { %>
          <% if (i === currentPage) { %>
            <span class="px-3 py-1.5 rounded-lg bg-indigo-600 border border-indigo-500"><%= i %></span>
          <% } else { %>
            <a href="?page=<%= i %><%= extraQS %>" class="px-3 py-1.5 rounded-lg bg-white/10 hover:bg-white/15 border border-white/10"><%= i %></a>
          <% } %>
        <% } %>

        <% if (currentPage < totalPages) { %>
          <a href="?page=<%= currentPage + 1 %><%= extraQS %>" class="px-3 py-1.5 rounded-lg bg-white/10 hover:bg-white/15 border border-white/10">&gt;</a>
        <% } else { %>
          <span class="px-3 py-1.5 rounded-lg bg-white/5 border border-white/10 opacity-50 cursor-not-allowed">&gt;</span>
        <% } %>
      </div>
    </div>
  </div>
</div>

<!-- ===== Libs ===== -->
<script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/html2pdf.js/0.10.1/html2pdf.bundle.min.js"></script>
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">
<script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>

<script>
  // ===== Delete trade (unchanged behavior) =====
  document.addEventListener('DOMContentLoaded', () => {
    document.querySelectorAll('.deleteTradeBtn').forEach(btn => {
      btn.addEventListener('click', async () => {
        const tradeId = btn.getAttribute('data-id');
        if (!confirm('Are you sure you want to delete this trade?')) return;

        try {
          const res = await fetch(`/trades/delete/${tradeId}`, { method: 'GET' });
          const data = await res.json();
          if (data.success) {
            Toastify({ text: "✅ " + data.message, duration: 3000, gravity: "top", position: "right", backgroundColor: "#22c55e" }).showToast();
            setTimeout(() => location.reload(), 800);
          } else {
            throw new Error(data.message || 'Failed to delete.');
          }
        } catch (err) {
          Toastify({ text: "❌ " + err.message, duration: 4000, gravity: "top", position: "right", backgroundColor: "#ef4444" }).showToast();
        }
      });
    });
  });

  // ===== AI Insight (unchanged API) =====
  function generateInsight() {
    const btn = document.getElementById('generateInsightBtn');
    btn.disabled = true; btn.innerText = '⏳ Generating...';
    fetch('/ai/analyze-trades')
      .then(res => res.json())
      .then(data => {
        if (data.analysis) {
          const container = document.getElementById('aiReportContainer');
          const content = document.getElementById('aiReportContent');
          const date = document.getElementById('generatedAt');
          content.innerHTML = marked.parse(data.analysis);
          date.innerText = `📅 Generated: ${new Date().toLocaleString()}`;
          container.classList.remove('hidden');
          Toastify({ text: "✅ AI Insight Generated", duration: 4000, gravity: "top", position: "right", backgroundColor: "#22c55e" }).showToast();
        } else {
          Toastify({ text: data.error || 'No analysis returned', duration: 4000, gravity: "top", position: "right", backgroundColor: "orange" }).showToast();
        }
      })
      .catch(err => {
        console.error(err);
        Toastify({ text: "❌ Failed to generate AI insight", duration: 4000, gravity: "top", position: "right", backgroundColor: "#ef4444" }).showToast();
      })
      .finally(() => { btn.disabled = false; btn.innerText = '🔍 Generate AI Insight'; });
  }

  function downloadAIReport() {
    const element = document.getElementById('aiReportContainer');
    html2pdf().from(element).set({
      margin: 0.5, filename: 'AI-Holding-Insight.pdf',
      image: { type: 'jpeg', quality: 0.98 }, html2canvas: { scale: 2 },
      jsPDF: { unit: 'in', format: 'letter', orientation: 'portrait' }
    }).save();
  }

  // ===== Sorting & Filtering (kept, refined visuals) =====
  document.addEventListener('DOMContentLoaded', () => {
    const table   = document.getElementById('tradeTable');
    const tbody   = table.querySelector('tbody');
    const headers = table.querySelectorAll('thead th[data-sort]');

    const fltSymbol    = document.getElementById('fltSymbol');
    const fltDirection = document.getElementById('fltDirection');
    const fltStrategy  = document.getElementById('fltStrategy');
    const fltOutcome   = document.getElementById('fltOutcome');
    const fltDateFrom  = document.getElementById('fltDateFrom');
    const fltDateTo    = document.getElementById('fltDateTo');
    const fltDateRange = document.getElementById('fltDateRange');
    const fltPLMin     = document.getElementById('fltPLMin');
    const fltPLMax     = document.getElementById('fltPLMax');
    const fltPctMin    = document.getElementById('fltPctMin');
    const fltPctMax    = document.getElementById('fltPctMax');
    const fltApply     = document.getElementById('fltApply');
    const fltReset     = document.getElementById('fltReset');
    const showingStats = document.getElementById('showingStats');
    const showingStatsBottom = document.getElementById('showingStatsBottom');

    // Datepicker
    const fp = flatpickr(fltDateRange, {
      mode: 'range',
      dateFormat: 'Y-m-d',
      onChange: (selectedDates) => {
        if (selectedDates.length === 2) {
          const [start, end] = selectedDates;
          fltDateFrom.value = fp.formatDate(start, 'Y-m-d');
          fltDateTo.value   = fp.formatDate(end, 'Y-m-d');
        } else if (selectedDates.length === 1) {
          const [start] = selectedDates;
          fltDateFrom.value = fp.formatDate(start, 'Y-m-d');
          fltDateTo.value   = '';
        } else {
          fltDateFrom.value = ''; fltDateTo.value = '';
        }
      }
    });

    // Populate strategy/outcome
    const strategies = new Set(), outcomes = new Set();
    Array.from(tbody.querySelectorAll('tr[data-date]')).forEach(tr => {
      const s = tr.getAttribute('data-strategy') || '—';
      const o = tr.getAttribute('data-outcome') || '—';
      if (s && s !== '—') strategies.add(s);
      if (o && o !== '—') outcomes.add(o);
    });
    [...strategies].sort().forEach(s => fltStrategy.appendChild(new Option(s, s)));
    [...outcomes].sort().forEach(o => fltOutcome.appendChild(new Option(o, o)));

    // Sorting
    let sortState = { key: null, dir: 1 };
    function comparator(key, dir) {
      return (a, b) => {
        const va = a.getAttribute('data-' + key) ?? '';
        const vb = b.getAttribute('data-' + key) ?? '';
        if (['pl','plpct','rr'].includes(key)) {
          const na = parseFloat(va) || 0, nb = parseFloat(vb) || 0;
          return (na - nb) * dir;
        }
        if (key === 'date') return (va > vb ? 1 : va < vb ? -1 : 0) * dir;
        const ta = String(va).toLowerCase(), tb = String(vb).toLowerCase();
        return (ta > tb ? 1 : ta < tb ? -1 : 0) * dir;
      };
    }
    function applySort(key) {
      const rows = Array.from(tbody.querySelectorAll('tr[data-date]')).filter(r => r.style.display !== 'none');
      if (sortState.key === key) sortState.dir = -sortState.dir; else { sortState.key = key; sortState.dir = 1; }
      rows.sort(comparator(key, sortState.dir));
      rows.forEach(r => tbody.appendChild(r));
      headers.forEach(h => h.querySelector('[data-sort-indicator]').textContent = '⇅');
      const active = Array.from(headers).find(h => h.getAttribute('data-sort') === key);
      if (active) active.querySelector('[data-sort-indicator]').textContent = sortState.dir === 1 ? '↑' : '↓';
    }
    headers.forEach(h => h.addEventListener('click', () => applySort(h.getAttribute('data-sort'))));

    // Filtering
    function inRange(val, min, max) {
      if (min !== '' && !isNaN(min) && val < Number(min)) return false;
      if (max !== '' && !isNaN(max) && val > Number(max)) return false;
      return true;
    }

    function applyFilters() {
      const sym   = fltSymbol.value.trim().toLowerCase();
      const dir   = fltDirection.value;
      const strat = fltStrategy.value;
      const outc  = fltOutcome.value;
      const dFrom = fltDateFrom.value;
      const dTo   = fltDateTo.value;

      const plMin = fltPLMin.value, plMax = fltPLMax.value;
      const pctMin= fltPctMin.value, pctMax= fltPctMax.value;

      const rows = Array.from(tbody.querySelectorAll('tr[data-date]'));
      let visibleCount = 0;

      rows.forEach(tr => {
        const tSym = tr.getAttribute('data-symbol') || '';
        const tDir = tr.getAttribute('data-direction') || '';
        const tStr = tr.getAttribute('data-strategy') || '';
        const tOut = tr.getAttribute('data-outcome') || '';
        const tDate= tr.getAttribute('data-date') || '';
        const tPL  = parseFloat(tr.getAttribute('data-pl')) || 0;
        const tPct = parseFloat(tr.getAttribute('data-plpct')) || 0;

        let ok = true;
        if (sym && !tSym.includes(sym)) ok = false;
        if (dir && tDir !== dir) ok = false;
        if (strat && tStr !== strat) ok = false;
        if (outc && tOut !== outc) ok = false;
        if (dFrom && tDate < dFrom) ok = false;
        if (dTo && tDate > dTo) ok = false;
        if (!inRange(tPL, plMin, plMax)) ok = false;
        if (!inRange(tPct, pctMin, pctMax)) ok = false;

        tr.style.display = ok ? '' : 'none';
        if (ok) visibleCount++;
      });

      const text = `Showing ${visibleCount} of <%= totalCount %> trades (filtered)`;
      if (showingStats) showingStats.textContent = text;
      if (showingStatsBottom) showingStatsBottom.textContent = text;

      if (sortState.key) applySort(sortState.key);
    }

    let symTimer = null;
    fltSymbol.addEventListener('input', () => { clearTimeout(symTimer); symTimer = setTimeout(applyFilters, 200); });
    [fltDirection, fltStrategy, fltOutcome].forEach(el => el.addEventListener('change', applyFilters));
    [fltPLMin, fltPLMax, fltPctMin, fltPctMax].forEach(el => el.addEventListener('input', applyFilters));
    fltApply.addEventListener('click', applyFilters);

    fltReset.addEventListener('click', () => {
      fltSymbol.value    = '';
      fltDirection.value = '';
      fltStrategy.value  = '';
      fltOutcome.value   = '';
      fltPLMin.value     = '';
      fltPLMax.value     = '';
      fltPctMin.value    = '';
      fltPctMax.value    = '';
      fp.clear(); fltDateFrom.value = ''; fltDateTo.value = '';

      Array.from(tbody.querySelectorAll('tr[data-date]')).forEach(tr => tr.style.display = '');
      if (showingStats) showingStats.textContent = `Showing <%= showingStart %>–<%= showingEnd %> of <%= totalCount %> trades`;
      if (showingStatsBottom) showingStatsBottom.textContent = `Showing <%= showingStart %>–<%= showingEnd %> of <%= totalCount %> trades`;
      headers.forEach(h => h.querySelector('[data-sort-indicator]').textContent = '⇅');
      sortState = { key: null, dir: 1 };
    });
  });
</script>

<%- include('../include/footer') %>
