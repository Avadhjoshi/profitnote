"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TickerResponse = exports.PrevCloseResponse = exports.MarketDepthResponse = exports.MarketStatusResponse = exports.OiDataResponse = exports.QuoteResponse = exports.DepthLevel = exports.PositionType = exports.Validity = exports.TransactionType = exports.OrderType = exports.OrderStatus = exports.LegName = exports.AmoTime = exports.ProductType = exports.Instrument = exports.ExchangeSegment = exports.Exchange = exports.DrvOptionType = exports.DhanEnv = void 0;
var DhanEnv;
(function (DhanEnv) {
    DhanEnv["PROD"] = "PROD";
    DhanEnv["SANDBOX"] = "SANDBOX";
})(DhanEnv = exports.DhanEnv || (exports.DhanEnv = {}));
var DrvOptionType;
(function (DrvOptionType) {
    DrvOptionType["CALL"] = "CALL";
    DrvOptionType["PUT"] = "PUT";
})(DrvOptionType = exports.DrvOptionType || (exports.DrvOptionType = {}));
var Exchange;
(function (Exchange) {
    Exchange["NSE"] = "NSE";
    Exchange["BSE"] = "BSE";
})(Exchange = exports.Exchange || (exports.Exchange = {}));
var ExchangeSegment;
(function (ExchangeSegment) {
    ExchangeSegment["NSE_EQ"] = "NSE_EQ";
    ExchangeSegment["NSE_FNO"] = "NSE_FNO";
    ExchangeSegment["NSE_CURRENCY"] = "NSE_CURRENCY";
    ExchangeSegment["BSE_EQ"] = "BSE_EQ";
    ExchangeSegment["MCX_COMM"] = "MCX_COMM";
    ExchangeSegment["IDX_I"] = "IDX_I";
})(ExchangeSegment = exports.ExchangeSegment || (exports.ExchangeSegment = {}));
var Instrument;
(function (Instrument) {
    Instrument["EQUITY"] = "EQUITY";
    Instrument["FUTCOM"] = "FUTCOM";
    Instrument["FUTCUR"] = "FUTCUR";
    Instrument["FUTIDX"] = "FUTIDX";
    Instrument["FUTSTK"] = "FUTSTK";
    Instrument["INDEX"] = "INDEX";
})(Instrument = exports.Instrument || (exports.Instrument = {}));
var ProductType;
(function (ProductType) {
    ProductType["CNC"] = "CNC";
    ProductType["INTRADAY"] = "INTRADAY";
    ProductType["MARGIN"] = "MARGIN";
    ProductType["CO"] = "CO";
    ProductType["BO"] = "BO";
    ProductType["MTF"] = "MTF";
})(ProductType = exports.ProductType || (exports.ProductType = {}));
var AmoTime;
(function (AmoTime) {
    AmoTime["OPEN"] = "OPEN";
    AmoTime["OPEN_30"] = "OPEN_30";
    AmoTime["OPEN_60"] = "OPEN_60";
})(AmoTime = exports.AmoTime || (exports.AmoTime = {}));
var LegName;
(function (LegName) {
    LegName["ENTRY_LEG"] = "ENTRY_LEG";
    LegName["TARGET_LEG"] = "TARGET_LEG";
    LegName["STOP_LOSS_LEG"] = "STOP_LOSS_LEG";
})(LegName = exports.LegName || (exports.LegName = {}));
var OrderStatus;
(function (OrderStatus) {
    OrderStatus["TRANSIT"] = "TRANSIT";
    OrderStatus["PENDING"] = "PENDING";
    OrderStatus["REJECTED"] = "REJECTED";
    OrderStatus["CANCELLED"] = "CANCELLED";
    OrderStatus["TRADED"] = "TRADED";
    OrderStatus["EXPIRED"] = "EXPIRED";
})(OrderStatus = exports.OrderStatus || (exports.OrderStatus = {}));
var OrderType;
(function (OrderType) {
    OrderType["LIMIT"] = "LIMIT";
    OrderType["MARKET"] = "MARKET";
    OrderType["STOP_LOSS"] = "STOP_LOSS";
    OrderType["STOP_LOSS_MARKET"] = "STOP_LOSS_MARKET";
})(OrderType = exports.OrderType || (exports.OrderType = {}));
var TransactionType;
(function (TransactionType) {
    TransactionType["BUY"] = "BUY";
    TransactionType["SELL"] = "SELL";
})(TransactionType = exports.TransactionType || (exports.TransactionType = {}));
var Validity;
(function (Validity) {
    Validity["DAY"] = "DAY";
    Validity["IOC"] = "IOC";
})(Validity = exports.Validity || (exports.Validity = {}));
var PositionType;
(function (PositionType) {
    PositionType["LONG"] = "LONG";
    PositionType["SHORT"] = "SHORT";
    PositionType["CLOSED"] = "CLOSED";
})(PositionType = exports.PositionType || (exports.PositionType = {}));
class DepthLevel {
    constructor(bidOrders, bidQuantity, bidPrice, askPrice, askQuantity, askOrders) {
        this.bidOrders = bidOrders;
        this.bidQuantity = bidQuantity;
        this.bidPrice = bidPrice;
        this.askPrice = askPrice;
        this.askQuantity = askQuantity;
        this.askOrders = askOrders;
    }
}
exports.DepthLevel = DepthLevel;
class QuoteResponse {
    constructor(type, responseCode, securityId, ltp, ltq, ltt, atp, volume, totalSellQuantity, totalBuyQuantity, openPrice, closePrice, highPrice, lowPrice) {
        this.type = type;
        this.responseCode = responseCode;
        this.securityId = securityId;
        this.ltp = ltp;
        this.ltq = ltq;
        this.ltt = ltt;
        this.atp = atp;
        this.volume = volume;
        this.totalSellQuantity = totalSellQuantity;
        this.totalBuyQuantity = totalBuyQuantity;
        this.openPrice = openPrice;
        this.closePrice = closePrice;
        this.highPrice = highPrice;
        this.lowPrice = lowPrice;
    }
}
exports.QuoteResponse = QuoteResponse;
class OiDataResponse {
    constructor(type, responseCode, exchangeSegment, securityId, openInterest) {
        this.type = type;
        this.responseCode = responseCode;
        this.exchangeSegment = exchangeSegment;
        this.securityId = securityId;
        this.openInterest = openInterest;
    }
}
exports.OiDataResponse = OiDataResponse;
class MarketStatusResponse {
    constructor(type, responseCode, status) {
        this.type = type;
        this.responseCode = responseCode;
        this.status = status;
    }
}
exports.MarketStatusResponse = MarketStatusResponse;
class MarketDepthResponse {
    constructor(type, responseCode, ltp, depthLevels) {
        this.type = type;
        this.responseCode = responseCode;
        this.ltp = ltp;
        this.depthLevels = depthLevels;
    }
}
exports.MarketDepthResponse = MarketDepthResponse;
class PrevCloseResponse {
    constructor(type, responseCode, exchangeSegment, securityId, prevClosePrice, prevOpenInterest) {
        this.type = type;
        this.responseCode = responseCode;
        this.exchangeSegment = exchangeSegment;
        this.securityId = securityId;
        this.prevClosePrice = prevClosePrice;
        this.prevOpenInterest = prevOpenInterest;
    }
}
exports.PrevCloseResponse = PrevCloseResponse;
class TickerResponse {
    constructor(type, responseCode, exchangeSegment, securityId, ltp, ltt) {
        this.type = type;
        this.responseCode = responseCode;
        this.exchangeSegment = exchangeSegment;
        this.securityId = securityId;
        this.ltp = ltp;
        this.ltt = ltt;
    }
}
exports.TickerResponse = TickerResponse;
